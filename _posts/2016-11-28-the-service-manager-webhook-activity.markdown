---
layout:     post
title:      "The SCSM Webhook Activity"
subtitle:   "Connect SCSM to the cloud"
date:       2016-11-28 12:00:00
author:     "Jan Van Meirvenne"
header-img: "img/scsmbg.jpg"
---

Although being one of the underdogs of the System Center suite, [Service Manager](https://technet.microsoft.com/en-us/system-center-docs/sm/service-manager) does have its perks.

[Process Automation through Service Requests](https://technet.microsoft.com/en-us/system-center-docs/sm/manage/ops-managing-service-requests-in-system-center-2016-service-manager), one of the concepts vital to a next-gen work-environment, is one of the key features of the product. Allowing IT processes, be it automated or not, to be made available for end-users at the push of a button.

<img src="{{ site.url }}/assets/SCSM_WHA3.png" widht="1000" height="500" />

But, out-of-the-box this feature only comes with [Orchestrator](https://technet.microsoft.com/en-us/system-center-docs/orch/orchestrator) support :( To me, Orchestrator is rapidly becoming a thing of the past. PowerShell is sky-rocketing the Windows and Azure automation domain. [Service Management Automation](https://technet.microsoft.com/en-us/library/dn469260(v=sc.12).aspx) and [Azure Automation](https://azure.microsoft.com/en-us/services/automation/) are proving themselves as excellent platforms to manage your PowerShell runbooks. In comparison, Orchestrator feels outdated, clunky and while simple-to-use, missing out on the flexibility and power options PowerShell offers. Someday, I will elaborate more on this in another post.

The hybrid scenario where on-prem (for example SCSM) meets cloud (Azure Automation) places Orchestrator as a liaison: capturing inputs from SCSM and calling Azure Automation through the AzureRM.Automation module. OK, It works, pretty reliable even. But why put an extra cogwheel in your engine if you don't need it? [GridPro](https://www.gridprosoftware.com/products/sma-connector/) and [Cireson](http://cireson.com/apps/sma-connector/) provide a direct SMA connector that takes Orchestrator out of the picture. Alas, for Azure Automation, no ready to go integration exists...until now ;)

## Proudly announcing: The Webhook Activity Management Pack

What does this management pack do? It adds an extra activity 'Webhook Activity' type to the SCSM mix. When set to 'in progress' it will send configurable data to a webhook url where the underlying service can consime it (like Azure Automation).

This actvity allows you to configure the following parameters:

* URL: a webhook url to call when the activity is put 'in progress' by SCSM
* 10 Parameter Name/Value pairs where you can assign 'Name'-properties in a SR or Activity template for example, and link the 'Value'-properties in a Service Offering
* Wait For Callback: the activity will either wait until the runbook that is triggered by the webhook updates it (true), or immediately completes (false).
* Include Activity ID: If set to true, includes the Activity's GUID in the data sent to the webhook
* Activity ID Parameter: Allows you to specify the parameter-name for the activity-id (default: ActivityID)

<img src="{{ site.url }}/assets/SCSM_WHA1.png" widht="1000" height="500" />
<img src="{{ site.url }}/assets/SCSM_WHA1.png" widht="1000" height="500" />

# How does it work?

When a webhook activity is set to 'in progress' by the SCSM workflow engine, it will trigger a custom workflow that will do the following:

* Get the Activity properties
* Encode parameter name/value fields that are filled-in into a JSON array
* If specified, add the Activity ID
* Submit the JSON data to the webhook URL
* Update the statustext field with either the received web response (for Azure Automation this is the job id), or an error message in case of issues
* If 'Wait for Callback' is not enabled, the activity will be set to 'completed'
* In case of an error, the activity is set to 'failed' regardless of the 'Wait for Callback' setting

*Example JSON structure generated by the activity:*
{% highlight json %}
{"WebhookName":"default","RequestBody":"{\"First\":\"Alain\",\"Last\":\"Vandam\",\"Department\":\"Logistics\",\"Office\":\"Dusseldorf\",\"License\":\"Yes\",\"Country\":\"BE\",\"Mobile\":\"+32478707741\",\"ActivityId\":\"a1ffd77d-8693-a5a4-ddbf-aaf2d99cb060\"}","RequestHeader":{"Connection":"Keep-Alive","Expect":"100-continue","Host":"s2events.azure-automation.net","x-ms-request-id":"50161b9c-043d-47c8-96f7-03bb2ea3fc3d"}}
{% endhighlight %}

# Requirements

* For the JSON encoding, an external DLL is used. It is packaged in the release.
* The workflow server must have web access towards the used webhook URL's
* The workflow account must have advanced author rights in SCSM
* SCSM 2016 (tested) or 2012 R2 (shoud work, else notify me :))

# Install Instructions

* Import the management pack
* Copy to the 2 DLL's inside the SCSM Workflow Server's installation folder
    * If you are upgrading this management pack, stop the 'Microsoft Monitoring Agent' service before copying the DLL's. Restart it afterwards.
* You can now create templates containing webhook activities. Enjoy!

I also included 2 example runbooks that work together to execute the IT process and callback to the webhook activity (only tested on a hybrid worker).

The full, commented source code and subsequent releases are available on [GITHUB](https://github.com/JanVanMeirvenne/Custom.SM.WebhookActivity).


Feedback is appreciated, feel free to enter it below! Thanks for reading.